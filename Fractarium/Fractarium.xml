<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fractarium</name>
    </assembly>
    <members>
        <member name="T:Fractarium.App">
            <summary>
            Encapsulates the Fractarium desktop app and contains utility functions for the user interface.
            </summary>
        </member>
        <member name="F:Fractarium.App.Window">
            <summary>
            Gets a static reference to the running instance's window.
            </summary>
        </member>
        <member name="P:Fractarium.App.ScreenEnhancement">
            <summary>
            Returns the value by which the screen DPI is enhanced through the display settings.
            </summary>
        </member>
        <member name="P:Fractarium.App.CI">
            <summary>
            Determines the global locale for the app.
            </summary>
        </member>
        <member name="M:Fractarium.App.Initialize">
            <summary>
            Initializes associated XAML objects.
            </summary>
        </member>
        <member name="M:Fractarium.App.MakeDefaultBitmap(System.Int32,System.Int32,System.Int32*)">
            <summary>
            Returns an Avalonia bitmap fitted to the platform configuration.
            </summary>
            <param name="width">The width in pixels.</param>
            <param name="height">The height in pixels.</param>
            <param name="ptr">A handle from an array encoding the pixels.</param>
            <returns>A bitmap with an image.</returns>
        </member>
        <member name="M:Fractarium.App.PrepareInput(System.String)">
            <summary>
            Removes all whitespace from a string. To be used to ignore whitespace in text box inputs.
            </summary>
            <param name="text">A text box's text.</param>
            <returns>The input without whitespace.</returns>
        </member>
        <member name="T:Fractarium.Fractarium">
            <summary>
            Entry point for the application.
            </summary>
        </member>
        <member name="M:Fractarium.Fractarium.Main(System.String[])">
            <summary>
            Starts the application.
            </summary>
            <param name="args">Optional arguments given in the command line.</param>
        </member>
        <member name="M:Fractarium.Fractarium.BuildAvaloniaApp">
            <summary>
            Method necessary for the designer to work. Prepares the application launch.
            </summary>
            <returns>Object that initializes platform-specific services for the app.</returns>
        </member>
        <member name="T:Fractarium.Logic.BaseParameters">
            <summary>
            Holds the basic parameters needed to generate a fractal image.
            </summary>
        </member>
        <member name="P:Fractarium.Logic.BaseParameters.Width">
            <summary>
            Width of the fractal image.
            </summary>
        </member>
        <member name="P:Fractarium.Logic.BaseParameters.Height">
            <summary>
            Height of the fractal image.
            </summary>
        </member>
        <member name="P:Fractarium.Logic.BaseParameters.IterationLimit">
            <summary>
            Maximum amount of iterations possible for determining a pixel.
            </summary>
        </member>
        <member name="P:Fractarium.Logic.BaseParameters.Scale">
            <summary>
            How far the image is zoomed in.
            </summary>
        </member>
        <member name="P:Fractarium.Logic.BaseParameters.Midpoint">
            <summary>
            Central point of the image.
            </summary>
        </member>
        <member name="T:Fractarium.Logic.ComplexUtil">
            <summary>
            Utilities for handling complex numbers.
            </summary>
        </member>
        <member name="F:Fractarium.Logic.ComplexUtil.ComplexRegex">
            <summary>
            Matches a complex number.
            </summary>
        </member>
        <member name="M:Fractarium.Logic.ComplexUtil.TryParse(System.String,System.Numerics.Complex@)">
            <summary>
            Tries to convert the string representation of a number to its complex number equivalent.
            </summary>
            <param name="s">String representing a complex number.</param>
            <param name="result">A complex number parsed from the string or zero if parsing failed.</param>
            <returns>Whether the conversion succeeded or failed.</returns>
        </member>
        <member name="M:Fractarium.Logic.ComplexUtil.MathString(System.Numerics.Complex)">
            <summary>
            Generates a concise string representation of a complex number.
            </summary>
            <param name="c">The complex input.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:Fractarium.Logic.Fractals.BurningShipJuliaSet">
            <summary>
            Represents a fractal image based on the Burning Ship Julia set.
            </summary>
        </member>
        <member name="M:Fractarium.Logic.Fractals.BurningShipJuliaSet.#ctor(Fractarium.Logic.BaseParameters,Fractarium.Logic.Palette,System.Double,System.Numerics.Complex)">
            <summary>
            Assigns all required parameters.
            </summary>
            <param name="parameters">Required base parameters.</param>
            <param name="palette">Required color palette.</param>
            <param name="power">Exponent required for the generalized fractal equation.</param>
            <param name="juliaConstant">The Julia constant parameter.</param>
        </member>
        <member name="M:Fractarium.Logic.Fractals.BurningShipJuliaSet.Iterate(System.Double,System.Double)">
            <summary>
            Iterates a complex point according to a specific fractal type's equation.
            </summary>
            <param name="r">Real component of the complex point to be iterated.</param>
            <param name="i">Imaginary component of the complex point to be iterated.</param>
            <returns>The color of the given point based on the iteration.</returns>
        </member>
        <member name="M:Fractarium.Logic.Fractals.BurningShipJuliaSet.IterateWithExponent(System.Double,System.Double)">
            <summary>
            Iterates a complex point according to the generalized fractal equation with a different exponent.
            </summary>
            <param name="r">Real component of the complex point to be iterated.</param>
            <param name="i">Imaginary component of the complex point to be iterated.</param>
            <returns>The color of the given point based on the iteration.</returns>
        </member>
        <member name="T:Fractarium.Logic.Fractals.BurningShipSet">
            <summary>
            Represents a fractal image based on the Burning Ship set.
            </summary>
        </member>
        <member name="M:Fractarium.Logic.Fractals.BurningShipSet.#ctor(Fractarium.Logic.BaseParameters,Fractarium.Logic.Palette,System.Double)">
            <summary>
            Assigns all required parameters.
            </summary>
            <param name="parameters">Required base parameters.</param>
            <param name="palette">Required color palette.</param>
            <param name="power">Exponent required for the generalized fractal equation.</param>
        </member>
        <member name="M:Fractarium.Logic.Fractals.BurningShipSet.Iterate(System.Double,System.Double)">
            <summary>
            Iterates a complex point according to a specific fractal type's equation.
            </summary>
            <param name="r">Real component of the complex point to be iterated.</param>
            <param name="i">Imaginary component of the complex point to be iterated.</param>
            <returns>The color of the given point based on the iteration.</returns>
        </member>
        <member name="M:Fractarium.Logic.Fractals.BurningShipSet.IterateWithExponent(System.Double,System.Double)">
            <summary>
            Iterates a complex point according to the generalized fractal equation with a different exponent.
            </summary>
            <param name="r">Real component of the complex point to be iterated.</param>
            <param name="i">Imaginary component of the complex point to be iterated.</param>
            <returns>The color of the given point based on the iteration.</returns>
        </member>
        <member name="T:Fractarium.Logic.Fractals.Fractal">
            <summary>
            Base class for all fractals based on escape time algorithms.
            </summary>
        </member>
        <member name="F:Fractarium.Logic.Fractals.Fractal.DivergenceLimit">
            <summary>
            For most fractals, when the sum of squares of a complex point's components after iteration surpasses 4,
            it is considered to be divergent.
            </summary>
        </member>
        <member name="F:Fractarium.Logic.Fractals.Fractal.Params">
            <summary>
            Basic parameters needed to generate a fractal image.
            </summary>
        </member>
        <member name="F:Fractarium.Logic.Fractals.Fractal.Palette">
            <summary>
            Palette of colors with which different iteration counts are colored.
            </summary>
        </member>
        <member name="F:Fractarium.Logic.Fractals.Fractal.Power">
            <summary>
            The exponent the central variable in the fractal equation is raised to.
            </summary>
        </member>
        <member name="M:Fractarium.Logic.Fractals.Fractal.#ctor(Fractarium.Logic.BaseParameters,Fractarium.Logic.Palette,System.Double)">
            <summary>
            Assigns all required parameters.
            </summary>
            <param name="parameters">Required base parameters.</param>
            <param name="palette">Required color palette.</param>
            <param name="power">Exponent required for the generalized fractal equation.</param>
        </member>
        <member name="M:Fractarium.Logic.Fractals.Fractal.GetPointFromPixel(System.Double,System.Double)">
            <summary>
            Calculates the complex point from the fractal parameters and given pixel coordinates.
            </summary>
            <param name="x">The pixel's X coordinate.</param>
            <param name="y">The pixel's Y coordinate.</param>
            <returns>The corresponding point on the complex plane.</returns>
        </member>
        <member name="M:Fractarium.Logic.Fractals.Fractal.DrawImage(System.Int32*)">
            <summary>
            Draws the image of the fractal starting on a 32-bit unsigned integer pointer.
            </summary>
            <param name="bitmap">Pointer to the first bitmap pixel.</param>
        </member>
        <member name="M:Fractarium.Logic.Fractals.Fractal.Iterate(System.Double,System.Double)">
            <summary>
            Iterates a complex point according to a specific fractal type's equation.
            </summary>
            <param name="r">Real component of the complex point to be iterated.</param>
            <param name="i">Imaginary component of the complex point to be iterated.</param>
            <returns>The color of the given point based on the iteration.</returns>
        </member>
        <member name="M:Fractarium.Logic.Fractals.Fractal.IterateWithExponent(System.Double,System.Double)">
            <summary>
            Iterates a complex point according to the generalized fractal equation with a different exponent.
            </summary>
            <param name="r">Real component of the complex point to be iterated.</param>
            <param name="i">Imaginary component of the complex point to be iterated.</param>
            <returns>The color of the given point based on the iteration.</returns>
        </member>
        <member name="M:Fractarium.Logic.Fractals.Fractal.Normalize(System.Int32,System.Double,System.Double)">
            <summary>
            Normalizes the iteration value of a complex point to facilitate smoother coloring.
            </summary>
            <param name="iteration">The iteration value to be normalized.</param>
            <param name="nextR">Real component of the next complex number after break condition was reached.</param>
            <param name="nextI">Imaginary component of the next complex number after break condition was reached.</param>
            <returns>The normalized iteration value.</returns>
        </member>
        <member name="T:Fractarium.Logic.Fractals.FractalType">
            <summary>
            Used for indicating which of the preprogrammed fractal types is selected.
            </summary>
        </member>
        <member name="F:Fractarium.Logic.Fractals.FractalType.MandelbrotSet">
            <summary>
            Indicates a fractal generated with the Mandelbrot set formula.
            </summary>
        </member>
        <member name="F:Fractarium.Logic.Fractals.FractalType.JuliaSet">
            <summary>
            Indicates a fractal generated with the Julia set formula.
            </summary>
        </member>
        <member name="F:Fractarium.Logic.Fractals.FractalType.PhoenixSet">
            <summary>
            Indicates a fractal generated with the Phoenix set formula.
            </summary>
        </member>
        <member name="F:Fractarium.Logic.Fractals.FractalType.BurningShipSet">
            <summary>
            Indicates a fractal generated with the Burning Ship set formula.
            </summary>
        </member>
        <member name="F:Fractarium.Logic.Fractals.FractalType.BurningShipJuliaSet">
            <summary>
            Indicates a fractal generated with the Burning Ship Julia set formula.
            </summary>
        </member>
        <member name="F:Fractarium.Logic.Fractals.FractalType.TricornSet">
            <summary>
            Indicates a fractal generated with the Tricorn set formula.
            </summary>
        </member>
        <member name="F:Fractarium.Logic.Fractals.FractalType.LyapunovFractal">
            <summary>
            Indicates a fractal generated with the Lyapunov fractal equation.
            </summary>
        </member>
        <member name="T:Fractarium.Logic.Fractals.FractalTypes">
            <summary>
            Encapsulates functions associated with the FractalType enum.
            </summary>
        </member>
        <member name="P:Fractarium.Logic.Fractals.FractalTypes.Names">
            <summary>
            Returns the properly formatted names for all fractal types.
            </summary>
        </member>
        <member name="M:Fractarium.Logic.Fractals.FractalTypes.ByName(System.String)">
            <summary>
            Returns the enum value for the given name of a fractal type.
            </summary>
            <param name="name">Proper name of a fractal type.</param>
            <returns>The enum value associated with the name.</returns>
        </member>
        <member name="T:Fractarium.Logic.Fractals.JuliaSet">
            <summary>
            Represents a fractal image based on the Julia set.
            </summary>
        </member>
        <member name="M:Fractarium.Logic.Fractals.JuliaSet.#ctor(Fractarium.Logic.BaseParameters,Fractarium.Logic.Palette,System.Double,System.Numerics.Complex)">
            <summary>
            Assigns all required parameters.
            </summary>
            <param name="parameters">Required base parameters.</param>
            <param name="palette">Required color palette.</param>
            <param name="power">Exponent required for the generalized fractal equation.</param>
            <param name="juliaConstant">The Julia constant parameter.</param>
        </member>
        <member name="M:Fractarium.Logic.Fractals.JuliaSet.Iterate(System.Double,System.Double)">
            <summary>
            Iterates a complex point according to a specific fractal type's equation.
            </summary>
            <param name="r">Real component of the complex point to be iterated.</param>
            <param name="i">Imaginary component of the complex point to be iterated.</param>
            <returns>The color of the given point based on the iteration.</returns>
        </member>
        <member name="M:Fractarium.Logic.Fractals.JuliaSet.IterateWithExponent(System.Double,System.Double)">
            <summary>
            Iterates a complex point according to the generalized fractal equation with a different exponent.
            </summary>
            <param name="r">Real component of the complex point to be iterated.</param>
            <param name="i">Imaginary component of the complex point to be iterated.</param>
            <returns>The color of the given point based on the iteration.</returns>
        </member>
        <member name="T:Fractarium.Logic.Fractals.MandelbrotSet">
            <summary>
            Represents a fractal image based on the Mandelbrot set.
            </summary>
        </member>
        <member name="M:Fractarium.Logic.Fractals.MandelbrotSet.#ctor(Fractarium.Logic.BaseParameters,Fractarium.Logic.Palette,System.Double)">
            <summary>
            Assigns all required parameters.
            </summary>
            <param name="parameters">Required base parameters.</param>
            <param name="palette">Required color palette.</param>
            <param name="power">Exponent required for the generalized fractal equation.</param>
        </member>
        <member name="M:Fractarium.Logic.Fractals.MandelbrotSet.Iterate(System.Double,System.Double)">
            <summary>
            Iterates a complex point according to a specific fractal type's equation.
            </summary>
            <param name="r">Real component of the complex point to be iterated.</param>
            <param name="i">Imaginary component of the complex point to be iterated.</param>
            <returns>The color of the given point based on the iteration.</returns>
        </member>
        <member name="M:Fractarium.Logic.Fractals.MandelbrotSet.IterateWithExponent(System.Double,System.Double)">
            <summary>
            Iterates a complex point according to the generalized fractal equation with a different exponent.
            </summary>
            <param name="r">Real component of the complex point to be iterated.</param>
            <param name="i">Imaginary component of the complex point to be iterated.</param>
            <returns>The color of the given point based on the iteration.</returns>
        </member>
        <member name="T:Fractarium.Logic.Fractals.PhoenixSet">
            <summary>
            Represents a fractal image based on the Phoenix set.
            </summary>
        </member>
        <member name="M:Fractarium.Logic.Fractals.PhoenixSet.#ctor(Fractarium.Logic.BaseParameters,Fractarium.Logic.Palette,System.Double,System.Numerics.Complex,System.Numerics.Complex)">
            <summary>
            Assigns all required parameters.
            </summary>
            <param name="parameters">Required base parameters.</param>
            <param name="palette">Required color palette.</param>
            <param name="power">Exponent required for the generalized fractal equation.</param>
            <param name="juliaConstant">The Julia constant parameter.</param>
            <param name="phoenixConstant">The Phoenix constant parameter.</param>
        </member>
        <member name="M:Fractarium.Logic.Fractals.PhoenixSet.Iterate(System.Double,System.Double)">
            <summary>
            Iterates a complex point according to a specific fractal type's equation.
            </summary>
            <param name="r">Real component of the complex point to be iterated.</param>
            <param name="i">Imaginary component of the complex point to be iterated.</param>
            <returns>The color of the given point based on the iteration.</returns>
        </member>
        <member name="M:Fractarium.Logic.Fractals.PhoenixSet.IterateWithExponent(System.Double,System.Double)">
            <summary>
            Iterates a complex point according to the generalized fractal equation with a different exponent.
            </summary>
            <param name="r">Real component of the complex point to be iterated.</param>
            <param name="i">Imaginary component of the complex point to be iterated.</param>
            <returns>The color of the given point based on the iteration.</returns>
        </member>
        <member name="T:Fractarium.Logic.Fractals.TricornSet">
            <summary>
            Represents a fractal image based on the Tricorn set.
            </summary>
        </member>
        <member name="M:Fractarium.Logic.Fractals.TricornSet.#ctor(Fractarium.Logic.BaseParameters,Fractarium.Logic.Palette,System.Double)">
            <summary>
            Assigns all required parameters.
            </summary>
            <param name="parameters">Required base parameters.</param>
            <param name="palette">Required color palette.</param>
            <param name="power">Exponent required for the generalized fractal equation.</param>
        </member>
        <member name="M:Fractarium.Logic.Fractals.TricornSet.Iterate(System.Double,System.Double)">
            <summary>
            Iterates a complex point according to a specific fractal type's equation.
            </summary>
            <param name="r">Real component of the complex point to be iterated.</param>
            <param name="i">Imaginary component of the complex point to be iterated.</param>
            <returns>The color of the given point based on the iteration.</returns>
        </member>
        <member name="M:Fractarium.Logic.Fractals.TricornSet.IterateWithExponent(System.Double,System.Double)">
            <summary>
            Iterates a complex point according to the generalized fractal equation with a different exponent.
            </summary>
            <param name="r">Real component of the complex point to be iterated.</param>
            <param name="i">Imaginary component of the complex point to be iterated.</param>
            <returns>The color of the given point based on the iteration.</returns>
        </member>
        <member name="T:Fractarium.Logic.Palette">
            <summary>
            Represents a list of ARGB colors that serves as the basis for coloring a fractal image.
            </summary>
        </member>
        <member name="F:Fractarium.Logic.Palette.C">
            <summary>
            Holds the palette colors as a 2D byte array.
            </summary>
        </member>
        <member name="P:Fractarium.Logic.Palette.Ratio">
            <summary>
            Indicates after how much of the iteration fraction a different color should be targeted for the gradient.
            </summary>
        </member>
        <member name="F:Fractarium.Logic.Palette.MaxColors">
            <summary>
            Maximum amount of colors allowed in a palette excluding the set element color.
            </summary>
        </member>
        <member name="F:Fractarium.Logic.Palette.MinColors">
            <summary>
            Minimum amount of colors allowed in a palette excluding the set element color.
            </summary>
        </member>
        <member name="P:Fractarium.Logic.Palette.Size">
            <summary>
            Amount of colors in the palette excluding the set element color.
            </summary>
        </member>
        <member name="P:Fractarium.Logic.Palette.ElementColor">
            <summary>
            Holds the color representing a point that is part of a set-based fractal's respective set.
            </summary>
        </member>
        <member name="M:Fractarium.Logic.Palette.#ctor(System.String[])">
            <summary>
            Instantiates a new palette from the given list of hexadecimal ARGB colors.
            </summary>
            <param name="colors">ARGB Colors given as hexadecimal strings.</param>
        </member>
        <member name="M:Fractarium.Logic.Palette.GradientColor(System.Double)">
            <summary>
            Calculates a color between two palette colors based on a pixel's iteration count and the iteration limit.
            </summary>
            <param name="iterationFraction">How close the iteration count of a point is to the iteration limit.</param>
            <returns>An ARGB color as a 32-bit integer.</returns>
        </member>
        <member name="P:Fractarium.Logic.Palette.Item(System.Int32)">
            <summary>
            Gets the palette color given by the index. To get the set element color, use key 0.
            </summary>
            <param name="key">Index of the palette color.</param>
            <returns>The palette color as an array of 4 bytes.</returns>
        </member>
        <member name="P:Fractarium.Logic.Palette.Item(System.Int32,System.Int32)">
            <summary>
            Allows the manipulation of individual bytes of the palette.
            </summary>
            <param name="color">Indexes the color of the palette.</param>
            <param name="colorByte">Indexes the byte of the ARGB color.</param>
            <returns>The value of the indexed color and color byte.</returns>
        </member>
        <member name="M:Fractarium.Logic.Palette.AppendRandom">
            <summary>
            Appends a random new color to the end of the palette, unless it would exceed maximum size.
            </summary>
            <returns>Whether a color could be appended.</returns>
        </member>
        <member name="M:Fractarium.Logic.Palette.DuplicateAt(System.Int32)">
            <summary>
            Inserts the color found at the specified index next to itself, unless it would exceed maximum size.
            </summary>
            <param name="index">Indexes the color to be duplicated.</param>
            <returns>Whether the color could be duplicated.</returns>
        </member>
        <member name="M:Fractarium.Logic.Palette.RemoveAt(System.Int32)">
            <summary>
            Removes the specified color of the palette, unless there would be no gradient colors left.
            </summary>
            <param name="index">Number of the color to be removed.</param>
            <returns>Whether the color could be removed.</returns>
        </member>
        <member name="M:Fractarium.Logic.Palette.DrawContinuousPreview(System.Int32,System.Int32,System.Int32*)">
            <summary>
            Draws a depiction of the palette with the colors blending together like a gradient.
            </summary>
            <param name="width">Width of the bitmap.</param>
            <param name="height">Height of the bitmap.</param>
            <param name="ptr">Handle to the array encoding the bitmap.</param>
        </member>
        <member name="M:Fractarium.Logic.Palette.DrawDiscretePreview(System.Int32,System.Int32,System.Int32*)">
            <summary>
            Draws a depiction of the palette with the colors visible as rectangles without blending.
            </summary>
            <param name="width">Width of the bitmap.</param>
            <param name="height">Height of the bitmap.</param>
            <param name="ptr">Handle to the array encoding the bitmap.</param>
        </member>
        <member name="T:Fractarium.UserInterface.AppContext">
            <summary>
            Represents the data context for the entire user interface.
            </summary>
        </member>
        <member name="P:Fractarium.UserInterface.AppContext.Fractal">
            <summary>
            Holds a reference to the currently displayed fractal.
            </summary>
        </member>
        <member name="P:Fractarium.UserInterface.AppContext.FractalType">
            <summary>
            The currently selected fractal type.
            </summary>
        </member>
        <member name="P:Fractarium.UserInterface.AppContext.ZoomFactor">
            <summary>
            How much the scale is multiplied after clicking on a point in the image.
            </summary>
        </member>
        <member name="P:Fractarium.UserInterface.AppContext.JuliaConstant">
            <summary>
            The constant coefficient used for fractals related to the Julia set.
            </summary>
        </member>
        <member name="P:Fractarium.UserInterface.AppContext.PhoenixConstant">
            <summary>
            The constant coefficient used in the Phoenix set.
            </summary>
        </member>
        <member name="P:Fractarium.UserInterface.AppContext.Exponent">
            <summary>
            The constant coefficient used for fractals related to the Multibrot set.
            </summary>
        </member>
        <member name="F:Fractarium.UserInterface.AppContext.Params">
            <summary>
            Holds the parameter values most recently parsed from the parameter tab.
            </summary>
        </member>
        <member name="F:Fractarium.UserInterface.AppContext.Palette">
            <summary>
            Holds the currently selected color palette.
            </summary>
        </member>
        <member name="M:Fractarium.UserInterface.AppContext.Render">
            <summary>
            Uses current parameters to render a fractal image.
            </summary>
            <returns>An Avalonia bitmap holding the image.</returns>
        </member>
        <member name="T:Fractarium.UserInterface.ColorTab">
            <summary>
            The main menu tab where the color palette can be manipulated.
            </summary>
        </member>
        <member name="P:Fractarium.UserInterface.ColorTab.ColorPreview">
            <summary>
            Holds the color of the color preview.
            </summary>
        </member>
        <member name="F:Fractarium.UserInterface.ColorTab.ColorSelector">
            <summary>
            The color selection combo box in the tab.
            </summary>
        </member>
        <member name="M:Fractarium.UserInterface.ColorTab.#ctor">
            <summary>
            Initializes associated XAML objects.
            </summary>
        </member>
        <member name="M:Fractarium.UserInterface.ColorTab.UpdateControls">
            <summary>
            Performs all UI updates for when a palette is set in the data context.
            </summary>
        </member>
        <member name="M:Fractarium.UserInterface.ColorTab.UpdateButtonsEnabled">
            <summary>
            Enables the color widening and removal buttons based on whether current palette bounds are reached.
            </summary>
        </member>
        <member name="M:Fractarium.UserInterface.ColorTab.SelectColorFromPreview(System.Object,Avalonia.Input.PointerReleasedEventArgs)">
            <summary>
            Sets the color selector to what color was clicked on in the preview.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data associated with the event.</param>
        </member>
        <member name="M:Fractarium.UserInterface.ColorTab.OnPaletteSizeSpin(System.Object,Avalonia.Controls.SpinEventArgs)">
            <summary>
            Handles the event for when the palette size spinner was used.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data associated with the event.</param>
        </member>
        <member name="M:Fractarium.UserInterface.ColorTab.OnColorSelected(System.Object,Avalonia.Controls.SelectionChangedEventArgs)">
            <summary>
            Handles the event for when a color is selected in the color selector.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data associated with the event.</param>
        </member>
        <member name="M:Fractarium.UserInterface.ColorTab.OnHexColorInput(System.Object,Avalonia.Input.KeyEventArgs)">
            <summary>
            Handles user input in the hex color text box.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data associated with the event.</param>
        </member>
        <member name="M:Fractarium.UserInterface.ColorTab.OnColorComponentInput(System.Object,Avalonia.Input.KeyEventArgs)">
            <summary>
            Handles user input in the color component text boxes.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data associated with the event.</param>
        </member>
        <member name="M:Fractarium.UserInterface.ColorTab.OnWidenColor(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Handles input for when a user wants to widen a color in the palette.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data associated with the event.</param>
        </member>
        <member name="M:Fractarium.UserInterface.ColorTab.OnRemoveColor(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Handles input for when a user wants to remove a color from the palette.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data associated with the event.</param>
        </member>
        <member name="T:Fractarium.UserInterface.MainWindow">
            <summary>
            Holds the content of the main window.
            </summary>
        </member>
        <member name="F:Fractarium.UserInterface.MainWindow.Context">
            <summary>
            Holds the data context for the entire user interface.
            </summary>
        </member>
        <member name="M:Fractarium.UserInterface.MainWindow.#ctor">
            <summary>
            Initializes associated XAML objects.
            </summary>
        </member>
        <member name="M:Fractarium.UserInterface.MainWindow.InitializeMenu(System.Object,System.EventArgs)">
            <summary>
            Performs initialization operations for the user interface that can't be otherwise implemented.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data associated with the event.</param>
        </member>
        <member name="M:Fractarium.UserInterface.MainWindow.SetSizeParametersFromBounds(Avalonia.Rect)">
            <summary>
            If the option is enabled, sets the image width and height parameters from the window size.
            </summary>
            <param name="bounds">Bounds property of the window.</param>
        </member>
        <member name="M:Fractarium.UserInterface.MainWindow.ReactToTextBoxInput(Avalonia.Controls.TextBox,System.Boolean,Avalonia.Input.KeyEventArgs)">
            <summary>
            Sets a text box's styling to the appropriate style and disables the render button depending on the
            correctness of user input. Also initiates rendering if the enter key was pressed.
            </summary>
            <param name="box">The box where user input occurred.</param>
            <param name="parsed">Whether the input could be parsed correctly.</param>
            <param name="e">Data associated with the key event from input.</param>
        </member>
        <member name="M:Fractarium.UserInterface.MainWindow.InitRender(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Used to start the rendering process from the user interface.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data associated with the event.</param>
        </member>
        <member name="M:Fractarium.UserInterface.MainWindow.TrackCursorPositionOnImage(System.Object,Avalonia.Input.PointerEventArgs)">
            <summary>
            Tracks the image pixel position of the mouse when moved over the image.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data associated with the event.</param>
        </member>
        <member name="M:Fractarium.UserInterface.MainWindow.TrackImageClick(System.Object,Avalonia.Input.PointerReleasedEventArgs)">
            <summary>
            Tracks which mouse button was used when the image was clicked on.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data associated with the event.</param>
        </member>
        <member name="M:Fractarium.UserInterface.MainWindow.Zoom(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Zooms into the image by evaluating tracked mouse input data, updating parameters and re-rendering.
            Cannot extract mouse input data from event parameter due to framework design.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data associated with the event.</param>
        </member>
        <member name="T:Fractarium.UserInterface.ParameterTab">
            <summary>
            The main menu tab where image parameters can be set.
            </summary>
        </member>
        <member name="P:Fractarium.UserInterface.ParameterTab.BindImageSizeToWindow">
            <summary>
            Indicates whether width and height parameters should be adapted to the window size.
            </summary>
        </member>
        <member name="M:Fractarium.UserInterface.ParameterTab.#ctor">
            <summary>
            Initializes associated XAML objects.
            </summary>
        </member>
        <member name="M:Fractarium.UserInterface.ParameterTab.OnFractalTypeSelected(System.Object,Avalonia.Controls.SelectionChangedEventArgs)">
            <summary>
            Sets the fractal type parameter to the type selected in the combo box.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data associated with the event.</param>
        </member>
        <member name="M:Fractarium.UserInterface.ParameterTab.OnBindImageSizeToWindow(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Handles the event when someone clicks the check box for binding the image size to window size.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data associated with the event.</param>
        </member>
        <member name="M:Fractarium.UserInterface.ParameterTab.OnPositiveIntInput(System.Object,Avalonia.Input.KeyEventArgs)">
            <summary>
            Handles user input for parameters that are interpreted as positive integers.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data associated with the event.</param>
        </member>
        <member name="M:Fractarium.UserInterface.ParameterTab.OnLongInput(System.Object,Avalonia.Input.KeyEventArgs)">
            <summary>
            Handles user input for parameters that are interpreted as long positive integers.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data associated with the event.</param>
        </member>
        <member name="M:Fractarium.UserInterface.ParameterTab.OnComplexInput(System.Object,Avalonia.Input.KeyEventArgs)">
            <summary>
            Handles user input for parameters that are interpreted as complex numbers.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data associated with the event.</param>
        </member>
        <member name="M:Fractarium.UserInterface.ParameterTab.OnFloatingPointInput(System.Object,Avalonia.Input.KeyEventArgs)">
            <summary>
            Handles user input for parameters that are interpreted as floating-point numbers.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data associated with the event.</param>
        </member>
        <member name="T:Fractarium.UserInterface.StatusBar">
            <summary>
            The status bar at the bottom of the user interface that shows relevant information about
            the current program state.
            </summary>
        </member>
        <member name="P:Fractarium.UserInterface.StatusBar.Coordinates">
            <summary>
            Sets the information about the real component of the currently hovered over complex point.
            </summary>
        </member>
        <member name="M:Fractarium.UserInterface.StatusBar.#ctor">
            <summary>
            Initializes XAML elements.
            </summary>
        </member>
    </members>
</doc>
